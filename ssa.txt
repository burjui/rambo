-------------
CODE:
1+2

SSA:
    @tmp0 = 1                               // 1
    @tmp1 = 2                               // 2
    @tmp2 = @tmp0 + @tmp1                   // 1+2
-------------
CODE:
(1 + 2) - 3 * (4 / 5)

SSA:
    @tmp0 = 1                               // 1
    @tmp1 = 2                               // 2
    @tmp2 = @tmp0 + @tmp1                   // 1 + 2
    @tmp3 = 3                               // 3
    @tmp4 = 4                               // 4
    @tmp5 = 5                               // 5
    @tmp6 = @tmp4 / @tmp5                   // 4 / 5
    @tmp7 = @tmp3 * @tmp6                   // 3 * (4 / 5)
    @tmp8 = @tmp2 - @tmp7                   // (1 + 2) - 3 * (4 / 5)
-------------
CODE:
"a" + "b"

SSA:
    @tmp0 = "a"                             // "a"
    @tmp1 = "b"                             // "b"
    @tmp2 = length @tmp0                    // left length
    @tmp3 = length @tmp1                    // right length
    @tmp4 = @tmp2 + @tmp3                   // total length
    @tmp5 = alloc @tmp4                     // "a" + "b"
    @tmp6 = copy @tmp0, @tmp5, @tmp2        // copy left
    @tmp7 = &[@tmp5 + @tmp2]                // right dst
    @tmp8 = copy @tmp1, @tmp7, @tmp3        // copy right
-------------
CODE:

        let x = 1
        x = 2
        x = 3
        

SSA:
    @tmp0 = 1                               // 1
    @tmp0 = 2                               // x = 2
    @tmp0 = 3                               // x = 3
-------------
CODE:

        let x = 0
        if (x) {
            x = 1
            2
        } else {
            x = 3
            4
        }
        

SSA:
    @tmp0 = 0                               // 0
    cbz @tmp0, @label2                      // jump to negative branch
    @tmp0 = 1                               // x = 1
    @tmp5 = 2                               // 2
    br @label6                              // jump to the end of conditional
@label2:                                    // negative branch
    @tmp0 = 3                               // x = 3
    @tmp9 = 4                               // 4
@label6:                                    // end of conditional
    @tmp0 = ϕ(@tmp0, @tmp0)                 // modified in a branch
    @tmp11 = ϕ(@tmp5, @tmp9)                // if (x) { x = 1 2 } else { x = 3 4 }
-------------
CODE:
if 0 {1} else {2}

SSA:
    @tmp0 = 0                               // 0
    cbz @tmp0, @label1                      // jump to negative branch
    @tmp3 = 1                               // 1
    br @label4                              // jump to the end of conditional
@label1:                                    // negative branch
    @tmp6 = 2                               // 2
@label4:                                    // end of conditional
    @tmp7 = ϕ(@tmp3, @tmp6)                 // if 0 {1} else {2}
-------------
CODE:
if 1 {2}

SSA:
    @tmp0 = 1                               // 1
    cbz @tmp0, @label1                      // jump to negative branch
    @tmp3 = 2                               // 2
    @tmp4 = ()                              // {2}
    br @label5                              // jump to the end of conditional
@label1:                                    // negative branch
    @tmp7 = ()                              // negative branch value
@label5:                                    // end of conditional
    @tmp8 = ϕ(@tmp4, @tmp7)                 // if 1 {2}
-------------
CODE:
1/2

SSA:
    @tmp0 = 1                               // 1
    @tmp1 = 2                               // 2
    @tmp2 = @tmp0 / @tmp1                   // 1/2
-------------
CODE:


SSA:
    @tmp0 = ()
-------------
CODE:

        let f = \ (x:num, y:num) -> x + y
        f 1 2
        

SSA:
    @tmp6 = 1                               // 1
    @tmp7 = 2                               // 2
    @tmp8 = call @tmp0, @tmp6, @tmp7        // f 1 2
    @tmp9 = end @tmp8
@tmp0:                                      // \ (x:num, y:num) -> x + y
    @tmp1 = arg[0]                          // x
    @tmp2 = arg[1]                          // y
    @tmp3 = @tmp1 + @tmp2                   // x + y
    ret @tmp3
-------------
CODE:
1*2

SSA:
    @tmp0 = 1                               // 1
    @tmp1 = 2                               // 2
    @tmp2 = @tmp0 * @tmp1                   // 1*2
-------------
CODE:
1-2

SSA:
    @tmp0 = 1                               // 1
    @tmp1 = 2                               // 2
    @tmp2 = @tmp0 - @tmp1                   // 1-2
-------------
CODE:

        let x = 0
        if (1) {
            if (2) x = 3
        }
        

SSA:
    @tmp0 = 0                               // 0
    @tmp1 = 1                               // 1
    cbz @tmp1, @label2                      // jump to negative branch
    @tmp4 = 2                               // 2
    cbz @tmp4, @label5                      // jump to negative branch
    @tmp0 = 3                               // x = 3
    @tmp8 = ()                              // x = 3
    br @label9                              // jump to the end of conditional
@label5:                                    // negative branch
    @tmp11 = ()                             // negative branch value
@label9:                                    // end of conditional
    @tmp0 = ϕ(@tmp0, @tmp0)                 // modified in a branch
    @tmp13 = ϕ(@tmp8, @tmp11)               // if (2) x = 3
    @tmp14 = ()                             // { if (2) x = 3 }
    br @label15                             // jump to the end of conditional
@label2:                                    // negative branch
    @tmp17 = ()                             // negative branch value
@label15:                                   // end of conditional
    @tmp0 = ϕ(@tmp0, @tmp0)                 // modified in a branch
    @tmp19 = ϕ(@tmp14, @tmp17)              // if (1) { if (2) x = 3 }
